using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Web.SessionState;

namespace ShoesProject
{
    /*
     * DB Class
     * Class used to hold all the methods that connect to the database to either select, update or delete items for The Showbox's store
     * 
     * */
    public class DB
    {
        SqlConnection myconn;
        SqlCommand myCmd;
        SqlDataAdapter myAdapter;
        String dbLocation;

        //constructor
        public DB()
        {
            myconn = new SqlConnection();
            //Used to connect to the Database regardless of the machine it is on, will always connect to the Database located in the databases folder
            dbLocation = HttpRuntime.AppDomainAppPath + "databases\\Shoes_DB.mdf";
            myconn.ConnectionString = "Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename=\"" + dbLocation + "\";Integrated Security=True;Connect Timeout=30";
            myconn.Open();
        }

        public String getPath()
        {
            return dbLocation;
        }

        /*
         * Method: getUsers()
         * Description: Used to get all the Users found in the database and returns a data table of all the users along with their information.
         * 
         * */
        public DataTable getUsers()
        {
            myCmd = new SqlCommand();
            myCmd.Connection = myconn;
            myCmd.CommandText = "Select * from Users";

            myAdapter = new SqlDataAdapter();
            myAdapter.SelectCommand = myCmd;
            DataTable myDT = new DataTable();

            myAdapter.Fill(myDT);

            return myDT;
        }

        /*
         * Method; login() 
         * Parameters: username, password
         * Description: Used to check if a user can log in to the database. It connects to the database using a SQL Select statement with 2 parameters, @username and @password and fills the results into a DataTable. If the Table has more than one row of data then the user was found and is allowed to login with the method returning their userid. If no user was found then it will return not found to prevent a user from logging in.
         * 
         */
        public string login(String username, String password)
        {
            myCmd = new SqlCommand();
            myCmd.Connection = myconn;
            myCmd.CommandText = "Select * from Users WHERE username = @username AND password = @pword";
            myCmd.Parameters.Add("@username", SqlDbType.VarChar);
            myCmd.Parameters["@username"].Value = username;
            myCmd.Parameters.Add("@pword", SqlDbType.VarChar);
            myCmd.Parameters["@pword"].Value = password;

            myAdapter = new SqlDataAdapter();
            myAdapter.SelectCommand = myCmd;
            DataTable tab = new DataTable();

            myAdapter.Fill(tab);

            //If the row count is greater than 0 then the username and password combo was found, return the id! If not found say not found
            return (tab.Rows.Count > 0) ? tab.Rows[0]["userid"].ToString() : "not found";
        }

        /*
         *  Method: createUser()
         *  Parameters: username, password, email, securityQuestion, securityAnswer
         *  Description: Used to create a new user in the database. A new user has a username, password, email and security question/answer to their name. Their userid is autogenerated within the database. This method adds new users into a datatable which is used to update the database itself using the Update method
         * 
         */
        public void createUser(String username, String password, String email, String securityQuestion, String securityAnswer)
        {
            myCmd = new SqlCommand();
            myCmd.Connection = myconn;

            myCmd.CommandText = "SELECT username, password, security_question, security_answer, email FROM Users WHERE 0 = 1";
            myAdapter = new SqlDataAdapter();
            myAdapter.SelectCommand = myCmd;

            myCmd = new SqlCommand();
            myCmd.Connection = myconn;
            myCmd.CommandText = "INSERT INTO Users(username, password, security_question, security_answer, email) VALUES(@username, @password, @question, @answer, @email)";
            myCmd.Parameters.AddWithValue("@username", username);
            myCmd.Parameters.AddWithValue("@password", password);
            myCmd.Parameters.AddWithValue("@question", securityQuestion);
            myCmd.Parameters.AddWithValue("@answer", securityAnswer);
            myCmd.Parameters.AddWithValue("@email", email);
            myAdapter.InsertCommand = myCmd;

            DataTable tab = new DataTable();
            myAdapter.Fill(tab);

            object[] newRow = {username, password, securityQuestion, securityAnswer, email };
            tab.Rows.Add(newRow);

            myAdapter.Update(tab);
        }

        /*
         * Method: getData()
         * Parameters: id
         * Description: Used to get the data of a product with the product id of id. It returns all the data of a product and adds it into a Dictionary. 
         * 
         */
        public Dictionary<string, string> getData(String id)
        {
            Dictionary<string, string> info = new Dictionary<string, string>();

            myCmd = new SqlCommand();
            myCmd.Connection = myconn;
            myCmd.CommandText = "Select * from Products WHERE product_id = @id";
            myCmd.Parameters.Add("@id", SqlDbType.Int);
            myCmd.Parameters["@id"].Value = int.Parse(id);

            myAdapter = new SqlDataAdapter();
            myAdapter.SelectCommand = myCmd;
            DataTable tab = new DataTable();
            myAdapter.Fill(tab);

            info.Add("name", tab.Rows[0]["product_name"].ToString());
            info.Add("image", tab.Rows[0]["image"].ToString());
            info.Add("description", tab.Rows[0]["description"].ToString());

            return info;
        }

        /*
         * Method: addToCart()
         * Parameters: productID
         * Description: Is used to add new items into a shopping cart. This method uses a different way to add items into a shopping cart. If there is already an item in the shopping cart with the userid and productid then it's quantity is increased. This is used to prevent duplication of cart items. If there is no item with a userid and productid combo then it is added into the Cart table.
         * 
         */
        public Boolean addToCart(string productID)
        {
            HttpSessionState session = HttpContext.Current.Session;
            myCmd = new SqlCommand();
            myCmd.Connection = myconn;
            myCmd.CommandText = @"IF EXISTS(SELECT * FROM Cart WHERE userid = @userid AND product_id = @product)
                        UPDATE Cart 
                        SET quantity = quantity + 1
                        WHERE product_id = @product AND userid = @userid
                    ELSE
                        INSERT INTO Cart(userid, product_id, quantity) VALUES(@userid, @product, 1);";
            myCmd.Parameters.AddWithValue("@userid", session["LoggedUser"]);
            myCmd.Parameters.AddWithValue("@product", productID);

            try
            {
                myCmd.ExecuteReader();
            }catch(Exception e)
            {
                return false;
            }
            

            return true;
        }

        /*
         * Method: getShipAddress()
         * Parameters: id
         * Description: Used to get the shipping address from user with userid of id. If no shipping address is found then it returns not found.
         * 
         */
        public string getShipAddress(string id)
        {
            myCmd = new SqlCommand();
            myCmd.Connection = myconn;
            myCmd.CommandText = "Select * from Users WHERE userid = @id";
            myCmd.Parameters.Add("@id", SqlDbType.Int);
            myCmd.Parameters["@id"].Value = int.Parse(id);

            myAdapter = new SqlDataAdapter();
            myAdapter.SelectCommand = myCmd;
            DataTable tab = new DataTable();
            myAdapter.Fill(tab);

            return (tab.Rows.Count > 0) ? tab.Rows[0]["shipping_address"].ToString() : "not found";
        }

        /*
         * Method: updateShipAddress()
         * Parameters: id, addressInfo
         * Description: Used to update the current shipping address for a user with userid of id. All users are created with a null shipping address so all that is needed is to update their address without having to keep an eye on inserts. addressInfo is in a format of address,city,state,zip so it can be split to access specific items of an address
         * 
         */

        public Boolean updateShipAddress(string id, string addressInfo)
        {
            myCmd = new SqlCommand();
            myCmd.Connection = myconn;
            myCmd.CommandText = "UPDATE Users SET shipping_address = @address WHERE userid=@id";
            myCmd.Parameters.AddWithValue("@address", addressInfo);
            myCmd.Parameters.AddWithValue("@id", id);

            try
            {
                myCmd.ExecuteReader();
            }catch(Exception e)
            {
                return false;
            }

            return true;
        }

        /*
         * Method: getPayment()
         * Parameters: id
         * Description: Functions the same as getShipAddress but for Payments this time
         * 
         */
        public string getPayment(string id)
        {
            myCmd = new SqlCommand();
            myCmd.Connection = myconn;
            myCmd.CommandText = "Select * from Users WHERE userid = @id";
            myCmd.Parameters.Add("@id", SqlDbType.Int);
            myCmd.Parameters["@id"].Value = int.Parse(id);

            myAdapter = new SqlDataAdapter();
            myAdapter.SelectCommand = myCmd;
            DataTable tab = new DataTable();
            myAdapter.Fill(tab);

            return (tab.Rows.Count > 0) ? tab.Rows[0]["payment_method"].ToString() : "not found";
        }

        /*
         * Method: updatePayment()
         * Parameters: id, method
         * Description: Functions the same as updateShipAddress but for Payments this time. method refers to the payment method that a user added. Method is in the format of card,expdate,cv
         * 
         */
        public Boolean updatePayment(string id, string method)
        {
            myCmd = new SqlCommand();
            myCmd.Connection = myconn;
            myCmd.CommandText = "UPDATE Users SET payment_method = @method WHERE userid=@id";
            myCmd.Parameters.AddWithValue("@method", method);
            myCmd.Parameters.AddWithValue("@id", id);

            try
            {
                myCmd.ExecuteReader();
            }
            catch (Exception e)
            {
                return false;
            }

            return true;
        }

        /*
         * Method: updateOrders()
         * Parameters: id
         * Description: Used to delete the items in a shopping cart for a user with an id of id after they have completed a purchase.
         */
        public void updateOrders(string id)
        {
            myCmd = new SqlCommand();
            myCmd.Connection = myconn;
            myCmd.CommandText = "DELETE FROM Cart WHERE userid = @userid";
            myCmd.Parameters.AddWithValue("@userid", id);

            try
            {
                myCmd.ExecuteReader();
            }catch(Exception e)
            {
                Console.WriteLine(e);
            }
        }
    }
}